apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def distInfo = ext.distInfo

group = distInfo.publishedGroupId
version = distInfo.libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'

    from javadoc.destinationDir
}

//// Jar  如果库依赖于其他库的话，就不能用这个，必须用默认生成的aar
//task androidJar(type: Jar) {
////    dependsOn assemble
////    group 'Build'
////    description 'get jar package'
//    from zipTree(
//            'build/intermediates/bundles/release/classes.jar')
//
//    delete new File("build/outputs")
//}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
//        links "https://androiddoc.qiniudn.com/reference/"
        links "http://docs.oracle.com/javase/8/docs/api"
        title "$distInfo.libraryName $distInfo.libraryVersion"
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
//    archives androidJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name distInfo.libraryName
            description distInfo.libraryDescription
            url distInfo.sitUrl
            inceptionYear '2017'

            packaging 'aar'
            groupId distInfo.bintaryGroupId
            artifactId distInfo.libraryArtifact
            version distInfo.libraryVersion

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection distInfo.gitUrl
                url distInfo.sitUrl
            }
            developers {
                developer {
                    id distInfo.developId
                    name distInfo.developName
                    email distInfo.developEmail
                }
            }
        }
    }
}

bintray {
    user = distInfo.bintrayUser
    key = distInfo.bintrayApiKey

    configurations = ['archives']

    dryRun = false
    publish = true

    pkg {
        repo = distInfo.bintrayRepo
        name = distInfo.libraryName
        licenses = ['Apache-2.0']
        vcsUrl = distInfo.gitUrl
        websiteUrl = distInfo.sitUrl
        issueTrackerUrl = distInfo.issuesUrl
        publicDownloadNumbers = true
        version {
            name = distInfo.libraryVersion
            desc = distInfo.libraryDescription
            vcsTag = distInfo.libraryVersion

            gpg {
                sign = true
            }
        }
    }
}

//以下内容用于发布SNAPSHOT版本，如果不需要可以移除。
//参考自：https://www.jfrog.com/confluence/display/RTF/Gradle+Artifactory+Plugin

apply plugin: "com.jfrog.artifactory"
artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    //The base Artifactory URL if not overridden by the publisher/resolver
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            username = bintray.user
            password = bintray.key
            maven = true
        }
        defaults {
            //这里的名字和前面bintray.configurations的值一致即可，会将其包含的输出上传到jfrog上去
            publishConfigs('archives')
        }
    }
}



